#include <iostream>

using namespace std;

#define N 9 // Sudoku size

// Function to print the Sudoku board
void printBoard(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        if (i % 3 == 0 && i != 0) {
            cout << "---------------------\n";
        }
        for (int j = 0; j < N; j++) {
            if (j % 3 == 0 && j != 0) {
                cout << " | ";
            }
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to check if a number is valid in a row
bool isValidInRow(int board[N][N], int row, int num) {
    for (int col = 0; col < N; col++) {
        if (board[row][col] == num) {
            return false;
        }
    }
    return true;
}

// Function to check if a number is valid in a column
bool isValidInCol(int board[N][N], int col, int num) {
    for (int row = 0; row < N; row++) {
        if (board[row][col] == num) {
            return false;
        }
    }
    return true;
}

// Function to check if a number is valid in a 3x3 box
bool isValidInBox(int board[N][N], int startRow, int startCol, int num) {
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            if (board[row + startRow][col + startCol] == num) {
                return false;
            }
        }
    }
    return true;
}

// Function to check if a number can be placed in a given cell
bool isSafe(int board[N][N], int row, int col, int num) {
    return isValidInRow(board, row, num) &&
           isValidInCol(board, col, num) &&
           isValidInBox(board, row - row % 3, col - col % 3, num);
}

// Function to find an empty cell in the Sudoku board
bool findEmptyCell(int board[N][N], int &row, int &col) {
    for (row = 0; row < N; row++) {
        for (col = 0; col < N; col++) {
            if (board[row][col] == 0) {
                return true;
            }
        }
    }
    return false;
}

// Backtracking function to solve Sudoku
bool solveSudoku(int board[N][N]) {
    int row, col;
    
    if (!findEmptyCell(board, row, col)) {
        return true; // Puzzle solved
    }

    for (int num = 1; num <= 9; num++) {
        if (isSafe(board, row, col, num)) {
            board[row][col] = num;

            if (solveSudoku(board)) {
                return true;
            }

            board[row][col] = 0; // Backtrack
        }
    }
    return false;
}

int main() {
    int board[N][N] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    cout << "Initial Sudoku Puzzle:\n";
    printBoard(board);

    if (solveSudoku(board)) {
        cout << "\nSolved Sudoku:\n";
        printBoard(board);
    } else {
        cout << "\nNo solution exists!\n";
    }

    return 0;
}
